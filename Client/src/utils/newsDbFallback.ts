/**
 * News Database Fallback Utility
 * This module provides fallback news data by reading from exported database snapshot
 * when the backend API is unavailable.
 *
 * The database snapshot is generated by running: node scripts/export-news-from-mysql.js
 */

import dbFallbackData from '../data/newsDbFallback.json' assert { type: 'json' };

interface NewsArticle {
  id: string;
  title: string;
  excerpt: string;
  content: string;
  featured_image_url?: string;
  published_date: string;
  is_published: boolean;
  is_featured: boolean;
  attachment_url?: string;
  attachment_name?: string;
}

interface DBNewsItem {
  id: string;
  title_bg: string;
  title_en: string;
  excerpt_bg: string;
  excerpt_en: string;
  content_bg: string | null;
  content_en: string | null;
  featured_image_url: string | null;
  featured_image_alt: string | null;
  is_published: boolean;
  is_featured: boolean;
  published_date: string;
  created_at: string;
  updated_at: string;
  attachment_url?: string;
  attachment_name?: string;
}

/**
 * Transform database news item to frontend format
 */
function transformNewsItem(item: DBNewsItem, language: string): NewsArticle {
  const isEnglish = language === 'en';

  // Handle empty fields - use Bulgarian if English is empty, and vice versa
  const title = isEnglish
    ? (item.title_en || item.title_bg || 'Untitled')
    : (item.title_bg || item.title_en || 'Без заглавие');

  const excerpt = isEnglish
    ? (item.excerpt_en || item.excerpt_bg || 'No excerpt available')
    : (item.excerpt_bg || item.excerpt_en || 'Няма кратко описание');

  const content = isEnglish
    ? (item.content_en || item.content_bg || '')
    : (item.content_bg || item.content_en || '');

  return {
    id: item.id,
    title,
    excerpt,
    content,
    featured_image_url: item.featured_image_url || undefined,
    published_date: item.published_date,
    is_published: item.is_published,
    is_featured: item.is_featured,
    attachment_url: item.attachment_url,
    attachment_name: item.attachment_name,
  };
}

/**
 * Reads news from the database fallback JSON file
 * This is used as a fallback when the backend API is not available
 */
export async function getNewsFromDatabase(
  language: string = 'bg',
  publishedOnly: boolean = true
): Promise<NewsArticle[]> {
  try {
    console.log('[DB Fallback] Loading news from database fallback...');
    console.log('[DB Fallback] Raw data:', dbFallbackData);

    let newsItems = dbFallbackData.news as DBNewsItem[];
    console.log('[DB Fallback] Found', newsItems.length, 'news items');

    if (publishedOnly) {
      newsItems = newsItems.filter(item => item.is_published);
      console.log('[DB Fallback] After filtering published:', newsItems.length, 'items');
    }

    const transformed = newsItems.map(item => transformNewsItem(item, language));
    console.log('[DB Fallback] Transformed news:', transformed);

    return transformed;
  } catch (error) {
    console.error('[DB Fallback] Failed to load fallback news data:', error);
    // Try mock data as ultimate fallback
    try {
      console.log('[DB Fallback] Trying mock data as final fallback...');
      const { getNewsInLanguage } = await import('../data/mockNewsData');
      return getNewsInLanguage(language === 'bg' ? 'bg' : 'en', publishedOnly);
    } catch (mockError) {
      console.error('[DB Fallback] Mock data also failed:', mockError);
      return [];
    }
  }
}

/**
 * Reads featured news from the database
 */
export async function getFeaturedNewsFromDatabase(
  language: string = 'bg',
  limit: number = 3
): Promise<NewsArticle[]> {
  try {
    const newsItems = (dbFallbackData.news as DBNewsItem[])
      .filter(item => item.is_published && item.is_featured)
      .slice(0, limit);

    return newsItems.map(item => transformNewsItem(item, language));
  } catch (error) {
    console.error('Failed to load featured news fallback:', error);
    // Try mock data as ultimate fallback
    try {
      const { getFeaturedNews } = await import('../data/mockNewsData');
      return getFeaturedNews(language === 'bg' ? 'bg' : 'en', limit);
    } catch {
      return [];
    }
  }
}

/**
 * Gets a single news article by ID
 */
export async function getNewsArticleFromDatabase(
  id: string,
  language: string = 'bg'
): Promise<NewsArticle | undefined> {
  try {
    const newsItem = (dbFallbackData.news as DBNewsItem[]).find(item => item.id === id);

    if (!newsItem) {
      return undefined;
    }

    return transformNewsItem(newsItem, language);
  } catch (error) {
    console.error('Failed to load news article fallback:', error);
    // Try mock data as ultimate fallback
    try {
      const { getNewsById } = await import('../data/mockNewsData');
      return getNewsById(id, language === 'bg' ? 'bg' : 'en');
    } catch {
      return undefined;
    }
  }
}
